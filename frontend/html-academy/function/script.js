/* Техническое задание #1

Мяу! Напиши программу getProfitableProject, которая определяет, какой проект выгодней: срочный или обычный.

Функция принимает на вход два параметра:

- время на проект в часах;
- прибыль, которую принесёт сайт, если будет сделан в срочном режиме.

Названия параметров могут быть любыми.

Внутри функции надо сравнить два проекта: срочный и обычный.

Обрати внимание, что срочный проект принесёт прибыль за то время, пока готовился бы обычный проект. Поэтому прибыль от срочного проекта нужно вычесть из его стоимости.

Функция getProfitableProject должна возвращать строку:


- 'Выгодней срочный проект. Потратишь на него ' + расходы — если срочный проект окажется дешевле обычного.
- 'Выгодней обычный проект. Потратишь на него ' + расходы — если обычный проект дешевле.

Первый тест. Время на проект в часах: 200, прибыль в срочном режиме: 50000. Ожидаемый ответ: Выгодней обычный проект. Потратишь на него 250000.

Второй тест. Время на проект в часах: 220, прибыль в срочном режиме: 150000. Ожидаемый ответ: Выгодней срочный проект. Потратишь на него 262500.

Третий тест. Время на проект в часах: 100, прибыль в срочном режиме: 40000. Ожидаемый ответ: Выгодней срочный проект. Потратишь на него 147500.

Четвёртый тест. Время на проект в часах: 300, прибыль в срочном режиме: 100000. Ожидаемый ответ: Выгодней обычный проект. Потратишь на него 375000.

Пятый тест. Время на проект в часах: 90, прибыль в срочном режиме: 30000. Ожидаемый ответ: Выгодней обычный проект. Потратишь на него 135000.


*/

function f1() {

    let getProfitableProject = (time, cash) => {
        let cashStart = cash;
        cash = function (time, fastwork) {
            let fixedRate = 1500;
            let work;
            if (fastwork) {
                time /= 2;
                fixedRate *= 2.5;
            };
            if (time > 150) {
                fixedRate -= 250;
            };
            work = time * fixedRate;
            return work;
        };

        cash.time = time;

        if (cash(time, true) - cashStart < cash(time, false)) {
            return `Выгодней срочный проект. Потратишь на него ${cash(time, true)-cashStart}`;
        } else {
            return `Выгодней обычный проект. Потратишь на него ${cashStart-cash(time, false) }`;
        }

    }


    document.querySelector('.out-1').innerHTML = `let getProfitableProject(220, 150000) =  ${getProfitableProject(220, 150000)};`;

}

document.querySelector('.b-1').onclick = f1;



/* Техническое задание #2

Мяу! Напиши программу для определения типа транспорта на велосипедной парковке.

Оформи решение в виде функции checkVehicle с двумя параметрами: количество колёс у транспорта и вес этого транспорта. Названия параметров могут быть любыми.

Если колеса два и вес транспорта меньше 100 кг, это велосипед. Функция должна возвращать строку 'Парковка разрешена'.

В остальных случаях функция должна возвращать строку 'Вам здесь не место! Мяу!'.

Первый тест. Количество колёс: 2, вес: 150, ожидаемый ответ: «Вам здесь не место! Мяу!»

Второй тест. Количество колёс: 4, вес: 1200, ожидаемый ответ: «Вам здесь не место! Мяу!»

Третий тест. Количество колёс: 2, вес: 14, ожидаемый ответ: «Парковка разрешена»

Четвёртый тест. Количество колёс: 2, вес: 100, ожидаемый ответ: «Вам здесь не место! Мяу!»

Пятый тест. Количество колёс: 4, вес: 50, ожидаемый ответ: «Вам здесь не место! Мяу!»


*/


function f2() {
    let checkVehicle = (wheels, weight) => {
        if (wheels == 2 && weight < 100)
            return `Парковка разрешена`;
        else return `Вам здесь не место! Мяу!`;


    }
    document.querySelector('.out-2').innerHTML = 'checkVehicle(4,80) = ' + checkVehicle(4, 80);
}

document.querySelector('.b-2').onclick = f2;


/* Техническое задание #3

Мяу! Напиши функцию calculatePressure, которая будет считать давление на глубине и возвращать это значение из функции.

Формула расчёта такая: давление = плотность жидкости * ускорение свободного падения * глубина.

У calculatePressure должно быть два параметра: плотность жидкости и глубина. Названия параметров могут быть любыми.

Ускорение свободного падения записывать в параметры не нужно. В формуле можно использовать среднее фиксированное значение — 9.8.

Результат вычислений округляй с помощью Math.round.

Первый тест. Плотность жидкости: 1000, глубина: 5 метров, ожидаемый результат: 49000

Второй тест. Плотность жидкости: 1030, глубина: 3 метра, ожидаемый результат: 30282

Третий тест. Плотность жидкости: 1028, глубина: 2 метров, ожидаемый результат: 20149

Четвёртый тест. Плотность жидкости: 926, глубина: 1 метров, ожидаемый результат: 9075




*/



function f3() {
    let calculatePressure = (fluidDensity, depth) => Math.round(fluidDensity * 9.8 * depth);


    document.querySelector('.out-3').innerHTML = 'calculatePressure(200,2) ' + calculatePressure(200, 2) + ';';
}

document.querySelector('.b-3').onclick = f3;


/* Техническое задание #4

Мяу! Напиши функцию calculate, которая будет распознавать пользовательский ввод, совершать математические операции и возвращать результат.

Параметры функции — firstNumber, secondNumber и operator.

Параметры firstNumber, secondNumber — операнды, параметр operator - оператор.

Все значения приходят в виде строк, в том числе и операторы. В третьем параметре содержится один из операторов: сложение ('+'), вычитание ('-'), умножение ('*'), деление ('/').

В зависимости от оператора программа должна совершать разные операции: складывать первое число со вторым, вычитать из первого числа второе, умножать первое на второе, делить первое на второе.

Не забудь сделать из строк с числами настоящие числа.

Первый тест. Первое число: 15, второе число 20, оператор: +, ожидаю результат: 35

Второй тест. Первое число: 110, второе число 22, оператор: /, ожидаю результат: 5

Третий тест. Первое число: 12, второе число 9, оператор: *, ожидаю результат: 108

Четвёртый тест. Первое число: 356, второе число 213, оператор: -, ожидаю результат: 143



*/

function f4() {
    let calculate = (firstNumber, secondNumber, operator) => {
        switch (operator) {
            case '+':
                return +firstNumber + +secondNumber;
            case '-':
                return +firstNumber - +secondNumber;
            case '/':
                return +firstNumber / +secondNumber;
            case '*':
                return +firstNumber * +secondNumber;
            default:
                return 'Оператор не известен';
        }

    }

    document.querySelector('.out-4').innerHTML = 'calculate(2, 3,+) = ' + calculate(2, 3, '+');
}

document.querySelector('.b-4').onclick = f4;


/* Техническое задание #5

Мяу! Напиши программу, которая будет анализировать мой суточный рацион.

Оформи программу в виде функции getDiet. Она должна принимать два параметра: массив с калорийностью блюд и лимит калорий на день. Названия параметров могут быть любыми.

Программа должна возвращать количество блюд из массива, которые я могу съесть и не превысить допустимые калории. Блюда будут съедаться по порядку, начиная с первого элемента в массиве.

Первый тест. Калорийность блюд: 10, 20, 30, 40, 90, предел: 100, ожидаемый максимум: 4 блюда

Второй тест. Калорийность блюд: 12, 27, 9, 20, 12, 13, 35, предел: 90, ожидаемый максимум: 5 блюд

Третий тест. Калорийность блюд: 20, 21, 15, 20, 13, 10, 29, 22, 10, предел: 150, ожидаемый максимум: 8 блюд

*/



function f5() {
    let getDiet = (arrayСalorieDish, limitCalorie) => {
        let sum = 0;
        for (let i = 0; i < arrayСalorieDish.length; i++) {
            sum += arrayСalorieDish[i];
            if (sum > limitCalorie) {
                // console.log(sum);
                return i;
            }

        }
    }

    document.querySelector('.out-5').innerHTML = 'getDiet([12, 27, 9, 20, 12, 13, 35], 90)' + getDiet([12, 27, 9, 20, 12, 13, 35], 90);
}

document.querySelector('.b-5').onclick = f5;



/* Техническое задание #6
Мяу! Напиши программу getDocumentsNumbers, которая будет возвращать число документов за указанный год.

У функции должно быть два параметра: массив с названиями документов и год, за который надо найти документы. Названия параметров могут быть любыми. Даты из массива записаны в виде строк.

Функция должна возвращать количество документов, в названии которых есть необходимый год.

Если таких документов в массиве нет, функция должна возвращать 0.

Первый тест. Названия документов: 

["01112018","20092017","05102017","12052018","04072005","02022018"]

Искомый год: 2018, ожидаемое количество документов: 3 

Второй тест. Названия документов: 

["20122011","03032012","20122012","09072011"]

Искомый год: 2012, ожидаемое количество документов: 2 

Третий тест. Названия документов: 

["03112018","02092016","11092015","05052018","07072007","11112011"]

Искомый год: 2017, ожидаемое количество документов: 0 
*/



function f6() {

    let getDocumentsNumbers = (nameDoc, numYear) => {
        let num = 0;
        for (i = 0; i < nameDoc.length; i++) {
            if (nameDoc[i].indexOf(numYear, 4) != -1) {
                num++;
            };
        }
        return num;

    };

    document.querySelector('.out-6').innerHTML = 'getDocumentsNumbers(["01112018", "20092017", "05102017", "12052018", "04072005", "02022018"], 2018)= ' + getDocumentsNumbers(["01112018", "20092017", "05102017", "12052018", "04072005", "02022018"], 2018) + ';';
}

document.querySelector('.b-6').onclick = f6;



/* Техническое задание #7

Напиши функцию calculateExpenses, которая вычисляет ежемесячные затраты компании на сотрудника из «чистой» зарплаты работника.

Функция должна принимать параметр netSalary – это «чистая» зарплата после вычета налогов.

В переменную incomeTax записан размер НДФЛ в процентах.

В переменной contributions указан общий размер взносов в процентах.

Функция должна возвращать общие затраты компании на сотрудника. Округляй результат вычислений с помощью Math.round.

Первый тест. «Чистая» зарплата: 70000, ожидаю результат: 104598

Второй тест. «Чистая» зарплата: 115000, ожидаю результат: 171839

Третий тест. «Чистая» зарплата: 95700, ожидаю результат: 143000

*/



function f7() {
    let incomeTax = 13;
    let contributions = 30;

    let calculateExpenses = (netSalary) => {
        let grossSalary = Math.round(netSalary * 100 / (100 - incomeTax) + (netSalary * 100 / (100 - incomeTax) * contributions) / 100);

        return grossSalary;

    }

    document.querySelector('.out-7').innerHTML = 'let calculateExpenses = ' + calculateExpenses(87);
}

document.querySelector('.b-7').onclick = f7;


/* Техническое задание #8

Мяу! Напиши программу getYears, которая будет возвращать массив с подходящими датами для Олимпиады.

Функция должна принимать на вход три параметра. Первый параметр — год, с которого нужно начать вести отсчёт (включительно). Второй — год, которым этот отсчёт надо закончить (включительно). Третий — число, которое обозначает сумму цифр в номере года.

Названия параметров могут быть любыми.

Годы в массиве должны быть числами и располагаться по возрастанию, от меньшего к большему.

Первый тест. Первый год: 2018, последний год: 2045, сумма цифр года: 11, ожидаемые года: 2018, 2027, 2036, 2045

Второй тест. Первый год: 2019, последний год: 2030, сумма цифр года: 5, ожидаемые года: 2021, 2030 

Третий тест. Первый год: 2020, последний год: 2042, сумма цифр года: 10, ожидаемые года: 2026, 2035 

*/


function f8() {

    let getYears = (yearStart, yearEnd, sum) => {
        let arrayYear = [];
        let n = 0;
        for (i = yearStart; i <= yearEnd; i++) {
            let m = yearStart + n;
            let k = m.toString().split('').reduce(function (a, b) {
                return +a + +b;
            });
            console.log(`k ${k}`);
            // if (yearStart + n != yearEnd && k == sum) {
            if (k == sum) {
                arrayYear.push(m);
                console.log(`m  ${m}`);
            }
            n++;
            // console.log(`k==${m.toString().split('').reduce(function (a, b) {
            //     return +a + +b;
            // })} m==${m}`);
            // console.log( m);
        }
        return arrayYear;
    };
    document.querySelector('.out-8').innerHTML = 'let getYears = ' + getYears(2018, 2045, 11) + ';';
}

document.querySelector('.b-8').onclick = f8;


/* Техническое задание #9

Мяу! Напиши для меня программу-календарь.

Оформи программу в виде функции getDayOfWeek. У неё должно быть два параметра: день недели, на который выпадает первое число месяца, и число, для которого нужно найти день недели в этом месяце.

Функция должна возвращать строку с названием дня недели. Название должно быть написано с маленькой буквы в именительном падеже: 'понедельник', 'вторник' и так далее.


Первый тест. Первый день месяца: вторник, число месяца: 15, ожидаемый день месяца: вторник 

Второй тест. Первый день месяца: суббота, число месяца: 21, ожидаемый день месяца: пятница 

Третий тест. Первый день месяца: пятница, число месяца: 31, ожидаемый день месяца: воскресенье 

Четвёртый тест. Первый день месяца: вторник, число месяца: 18, ожидаемый день месяца: пятница 

Пятый тест. Первый день месяца: воскресенье, число месяца: 26, ожидаемый день месяца: четверг 

Шестой тест. Первый день месяца: понедельник, число месяца: 1, ожидаемый день месяца: понедельник 
*/

function f9() {
    let getDayOfWeek = (dayOfWeekFirstDayMonth, day) => {
        let week = ['понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота', 'воскресенье'];
        let d;
        d = (day + week.indexOf(dayOfWeekFirstDayMonth) - 1) % 7;
        return week[d];
    };


    document.querySelector('.out-9').innerHTML = 'let getDayOfWeek("пятница", 13) = ' + getDayOfWeek('пятница', 13) + ';';
}

document.querySelector('.b-9').onclick = f9;


/* Техническое задание #10
Мяу! Напиши функцию calculateRoots, которая будет считать корни через дискриминант.

Формула дискриминанта выглядит так: b * b - 4 * a * c. Функция должна принимать на вход три параметра: a, b, c. Это коэффициенты из формулы дискриминанта.

Если полученное число меньше 0, функция должна возвращать строку 'Корней нет'.

Если результат равен 0, корень в уравнении один. Функция должна возвращать строку 'Корень равен ' + найденный корень. Формула корня в этом случае такая: -b / (2 * a).

А вот если дискриминант больше 0, корня два. Придётся посчитать каждый и добавить результат в строку. Формула для первого корня: (-b + √D) / (2 * a). Формула для второго корня: (-b - √D) / (2 * a). Функция должна возвращать строку 'Первый корень равен ' + первый корень + ', второй корень равен ' + второй корень.

Первый тест. Решаем уравнение: x2 + 6x + 9 = 0, ожидаемый ответ: Корень равен -3 

Второй тест. Решаем уравнение: 2x2 + 4x + 7 = 0, ожидаемый ответ: Корней нет 

Третий тест. Решаем уравнение: x2 + -2x + -3 = 0, ожидаемый ответ: Первый корень равен 3, второй корень равен -1 


*/


function f10() {

    let calculateRoots = (a, b, c) => {
        let discriminant = b * b - 4 * a * c;
        if (discriminant < 0) {
            return 'Корней нет';
        } else if (discriminant == 0) {
            return `Корень равен ${-b / (2 * a)}`;
        } else if (discriminant > 0) {
            return `Первый корень равен ${(-b + Math.sqrt(discriminant)) / (2 * a)}, второй корень равен ${(-b - Math.sqrt(discriminant)) / (2 * a)}`;
        };

    };



    document.querySelector('.out-10').innerHTML = ' Решаем уравнение: x2 + 6x + 9 = 0, ожидаемый ответ: Корень равен -3 | let calculateRoots(1, 6, 9) = ' + calculateRoots(1, 6, 9) + ';';
}

document.querySelector('.b-10').onclick = f10;


/* Техническое задание #11

Мяу! Мне нужно посчитать, сколько я заработаю денег на вкладах с разными условиями. Оформи программу, как функцию calculateDeposit с четырьмя параметрами:

1. начальная сумма депозита;
2. процент годовых (число от 0 до 100);
3. срок вклада в месяцах;
4. с капитализацией процентов или нет (флаг с булевым значением).

Функция должна возвращать итоговую сумму депозита, округлённую до рублей с помощью Math.floor. Название параметров используй любые.

Если вклад простой, то процент годовых делится на 12 и умножается на срок вклада, а затем начальная сумма увеличивается на посчитанный процент.

Вклад с капитализацией считается сложнее: каждый месяц к сумме депозита прибавляются накопленный за месяц процент годовых (не забывай делить процент на 12), а процент следующего месяца считается уже от увеличенной суммы депозита.

Начальная сумма: 100000 рублей, годовой процент: 12%, вклад на 1 мес., без капитализации, ожидаемый результат: 101000 рублей.

Начальная сумма: 100000 рублей, годовой процент: 12%, вклад на 1 мес., с капитализацией, ожидаемый результат: 101000 рублей.

Начальная сумма: 100000 рублей, годовой процент: 10%, вклад на 2 мес., без капитализации, ожидаемый результат: 101666 рублей.

Начальная сумма: 100000 рублей, годовой процент: 10%, вклад на 2 мес., с капитализацией, ожидаемый результат: 101673 рублей.

Начальная сумма: 200000 рублей, годовой процент: 6.8%, вклад на 6 мес., без капитализации, ожидаемый результат: 206800 рублей.

Начальная сумма: 200000 рублей, годовой процент: 0%, вклад на 6 мес., с капитализацией, ожидаемый результат: 200000 рублей.


*/


function f11() {
    let calculateDeposit = (startDepositAmount, percentageAnnum, depositPeriodMonths, capitalizationInterest) => {
        if (capitalizationInterest) {
            let d = startDepositAmount;
            for (i = 1; i <= depositPeriodMonths; i++) {
                d += d * (percentageAnnum / (12 * 100));
            };
            return Math.floor(d);

        } else {
            return Math.floor(startDepositAmount + startDepositAmount * (percentageAnnum / (12 * 100) * depositPeriodMonths));

        }

    };



    document.querySelector('.out-11').innerHTML = 'let calculateDeposit(100000, 10, 2, true)  = ' + calculateDeposit(100000, 10, 2, true) + ';';
}

document.querySelector('.b-11').onclick = f11;



/* Техническое задание #12

Мяу! Мне нужна программа getProfitableDeposit для сравнения вкладов. У неё должно быть четыре параметра:

исходный размер депозита;
срок депозита в месяцах;
процентная ставка для депозита с простыми процентами;
процентная ставка для депозита с капитализацией процентов.

Программа должна рассчитать, сколько я получу с двух разных вкладов: с обычными процентами и с капитализацией. Затем программа должна сравнить результаты и вернуть подходящую строку:

'Выбирай обычный вклад. Получишь ' + доход от вклада.
'Выбирай капитализацию. Получишь ' + доход от вклада.

Первый тест. Исходная сумма: 10000, количество месяцев: 9, процент без капитализации: 7, процент с капитализацией: 6.8. Ожидаемый ответ: Выбирай обычный вклад. Получишь 10525.

Второй тест. Исходная сумма: 300000, количество месяцев: 18, процент без капитализации: 7.2, процент с капитализацией: 6. Ожидаемый ответ: Выбирай обычный вклад. Получишь 332400.

Третий тест. Исходная сумма: 250000, количество месяцев: 14, процент без капитализации: 7, процент с капитализацией: 6.8. Ожидаемый ответ: Выбирай капитализацию. Получишь 270580.



*/


function f12() {
    let getProfitableDeposit = (defaultDeposit, depositPeriodMonths, rateDepositSimplePercent, rateDepositCapitalizationPercent) => {
        let calculateDepositCapitalization = () => {
            let d = defaultDeposit;
            for (i = 1; i <= depositPeriodMonths; i++) {
                d += d * (rateDepositCapitalizationPercent / (12 * 100));
            };
            return Math.floor(d);
        };
        let calculateDepositSimple = () => {
            return Math.floor(defaultDeposit + defaultDeposit * (rateDepositSimplePercent / (12 * 100) * depositPeriodMonths));
        };
        if (calculateDepositSimple(defaultDeposit, depositPeriodMonths, rateDepositSimplePercent) > calculateDepositCapitalization(defaultDeposit, depositPeriodMonths, rateDepositCapitalizationPercent)) {
            return 'Выбирай обычный вклад. Получишь ' + calculateDepositSimple(defaultDeposit, depositPeriodMonths, rateDepositSimplePercent);
        } else {
            return 'Выбирай капитализацию. Получишь ' + calculateDepositCapitalization(defaultDeposit, depositPeriodMonths, rateDepositCapitalizationPercent);
        }

    };

    document.querySelector('.out-12').innerHTML = 'let getProfitableDeposit(10000, 9, 7, 6.8)  = ' + getProfitableDeposit(10000, 9, 7, 6.8) + ';';
}

document.querySelector('.b-12').onclick = f12;